AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Various APIs for interfacing with Assets Collection
  Test

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 15
  Api:
    # enable CORS; to make more specific, change the origin wildcard
    # to a particular domain name, e.g. "'www.example.com'"
    Cors:
      AllowOrigin: "'*'"
      AllowMethods: "'*'"

Resources:
  PostAssetFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      CodeUri: post-asset/
      Policies:
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Events:
        PostAsset:
          Type: Api
          Properties:
            Path: /asset/create
            Method: POST
    Metadata:
      DockerTag: nodejs14.x-v1
      DockerContext: ./post-asset
      Dockerfile: Dockerfile

  GetAssetFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      CodeUri: get-asset/
      Policies:
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Events:
        GetAsset:
          Type: Api
          Properties:
            Path: /asset/{assetNumber}
            Method: GET
    Metadata:
      DockerTag: nodejs14.x-v1
      DockerContext: ./get-asset
      Dockerfile: Dockerfile

  GetAssetsFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      CodeUri: get-assets/
      Policies:
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Events:
        GetAssets:
          Type: Api
          Properties:
            Path: /assets
            Method: GET
    Metadata:
      DockerTag: nodejs14.x-v1
      DockerContext: ./get-assets
      Dockerfile: Dockerfile

  PostVendorFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      CodeUri: post-vendor/
      Policies:
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Events:
        PostAsset:
          Type: Api
          Properties:
            Path: /vendor/create
            Method: POST
    Metadata:
      DockerTag: nodejs14.x-v1
      DockerContext: ./post-vendor
      Dockerfile: Dockerfile

  GetVendorsFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      CodeUri: get-vendors/
      Policies:
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Events:
        GetVendors:
          Type: Api
          Properties:
            Path: /vendors
            Method: GET
    Metadata:
      DockerTag: nodejs14.x-v1
      DockerContext: ./get-vendors
      Dockerfile: Dockerfile

  PostCommodityFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      CodeUri: post-commodity/
      Policies:
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Events:
        PostCommodity:
          Type: Api
          Properties:
            Path: /commodity/create
            Method: POST
    Metadata:
      DockerTag: nodejs14.x-v1
      DockerContext: ./post-commodity
      Dockerfile: Dockerfile

  GetCommoditiesFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      CodeUri: get-commodities/
      Policies:
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Events:
        PostCommodity:
          Type: Api
          Properties:
            Path: /commodities
            Method: GET
    Metadata:
      DockerTag: nodejs14.x-v1
      DockerContext: ./get-commodities
      Dockerfile: Dockerfile

  PostLocationFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      CodeUri: post-location/
      Policies:
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Events:
        PostLocation:
          Type: Api
          Properties:
            Path: /location/create
            Method: POST
    Metadata:
      DockerTag: nodejs14.x-v1
      DockerContext: ./post-location
      Dockerfile: Dockerfile

  GetLocationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      CodeUri: get-locations/
      Policies:
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Events:
        GetLocations:
          Type: Api
          Properties:
            Path: /locations
            Method: GET
    Metadata:
      DockerTag: nodejs14.x-v1
      DockerContext: ./get-locations
      Dockerfile: Dockerfile

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  PostAssetApi:
    Description: "API Gateway endpoint URL for Prod stage for post-asset function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  PostAssetFunction:
    Description: "Assets Lambda Function ARN"
    Value: !GetAtt PostAssetFunction.Arn
  PostAssetFunctionIamRole:
    Description: "Implicit IAM Role created for Assets function"
    Value: !GetAtt PostAssetFunctionRole.Arn

  GetAssetApi:
    Description: "API Gateway endpoint URL for Prod stage for get-asset function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  GetAssetFunction:
    Description: "Assets Lambda Function ARN"
    Value: !GetAtt GetAssetFunction.Arn
  GetAssetFunctionIamRole:
    Description: "Implicit IAM Role created for Get Asset function"
    Value: !GetAtt GetAssetFunctionRole.Arn

  GetAssetsApi:
    Description: "API Gateway endpoint URL for Prod stage for get-asset function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  GetAssetsFunction:
    Description: "Assets Lambda Function ARN"
    Value: !GetAtt GetAssetsFunction.Arn
  GetAssetsFunctionIamRole:
    Description: "Implicit IAM Role created for Get Asset function"
    Value: !GetAtt GetAssetsFunctionRole.Arn

  PostVendorApi:
    Description: "API Gateway endpoint URL for Prod stage for post-vendor function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  PostVendorFunction:
    Description: "Post Vendor Lambda Function ARN"
    Value: !GetAtt PostVendorFunction.Arn
  PostVendorFunctionIamRole:
    Description: "Implicit IAM Role created for Post Vendor function"
    Value: !GetAtt PostVendorFunctionRole.Arn

  GetVendorsApi:
    Description: "API Gateway endpoint URL for Prod stage for post-vendor function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  GetVendorsFunction:
    Description: "Post Vendor Lambda Function ARN"
    Value: !GetAtt GetVendorsFunction.Arn
  GetVendorsFunctionIamRole:
    Description: "Implicit IAM Role created for Post Vendor function"
    Value: !GetAtt GetVendorsFunctionRole.Arn

  PostCommodityApi:
    Description: "API Gateway endpoint URL for Prod stage for post-commodity function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  PostCommodityFunction:
    Description: "Assets Lambda Function ARN"
    Value: !GetAtt PostCommodityFunction.Arn
  PostCommodityFunctionIamRole:
    Description: "Implicit IAM Role created for Post Commodity function"
    Value: !GetAtt PostCommodityFunctionRole.Arn

  GetCommoditiesApi:
    Description: "API Gateway endpoint URL for Prod stage for get-commodities function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  GetCommoditiesFunction:
    Description: "Assets Lambda Function ARN"
    Value: !GetAtt GetCommoditiesFunction.Arn
  GetCommoditiesFunctionIamRole:
    Description: "Implicit IAM Role created for Get Commodity function"
    Value: !GetAtt GetCommoditiesFunctionRole.Arn

  PostLocationApi:
    Description: "API Gateway endpoint URL for Prod stage for post-location function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  PostLocationFunction:
    Description: "Assets Lambda Function ARN"
    Value: !GetAtt PostLocationFunction.Arn
  PostLocationFunctionIamRole:
    Description: "Implicit IAM Role created for Location function"
    Value: !GetAtt PostLocationFunctionRole.Arn

  GetLocationsApi:
    Description: "API Gateway endpoint URL for Prod stage for get-locations function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  GetLocationsFunction:
    Description: "Get Locations Lambda Function ARN"
    Value: !GetAtt GetLocationsFunction.Arn
  GetLocationsFunctionIamRole:
    Description: "Implicit IAM Role created for Locations function"
    Value: !GetAtt GetLocationsFunctionRole.Arn
